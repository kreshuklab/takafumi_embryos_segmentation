# model configuration
model:
  # model class, e.g. UNet3D, ResidualUNet3D
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcr
  # feature maps scale factor
  f_maps: [32, 64, 128, 256, 512]
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
# trainer configuration
trainer:
  # path to the checkpoint directory
  checkpoint_dir: "CHECKPOINT_DIR"
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # how many iterations between validations
  # **IMPORTANT** if the validation run takes a long time, set this to a large number
  validate_after_iters: 2000
  # how many iterations between tensorboard logging
  log_after_iters: 500
  # max number of epochs (1 epoch correspond to going over all of the training patches)
  max_num_epochs: 1000
  # max number of iterations
  max_num_iterations: 100000
  # model with higher eval score is considered better
  eval_score_higher_is_better: True
# optimizer configuration
optimizer:
  # initial learning rate
  learning_rate: 0.0002
  # weight decay
  weight_decay: 0.0001
# loss function configuration
loss:
  # loss function to be used during training
  name: BCEDiceLoss
  # **IMPORTANT** do not use ignore label and just rely on FilterSliceBuilder to filter ignored regions
  ignore_index: null
  # skip last channel of the target which contains the ground truth labels
  skip_last_target: true
# evaluation metric configuration
eval_metric:
  # thresholds the boundary map, runs connected component and compares with ground truth annotations
  name: BoundaryAdaptedRandError
  # boundary map threshold
  threshold: 0.4
  # use first input channel
  use_first_input: true
  # use last target channel
  use_last_target: true
# learning rate scheduler configuration
lr_scheduler:
  # reduce initial learning rate on plateau
  name: ReduceLROnPlateau
  # reduce factor
  factor: 0.2
  # lower eval metric (ARand error) is better)
  mode: min
  # number of validation runs with no improvement after which the learning rate will be reduced
  patience: 15
# data loaders configuration
loaders:
  # class of the HDF5 dataset, currently StandardHDF5Dataset and LazyHDF5Dataset are supported.
  # When using LazyHDF5Dataset make sure to set `num_workers = 1`, due to a bug in h5py which corrupts the data
  # when reading from multiple threads.
  dataset: StandardHDF5Dataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 2
  # how many subprocesses to use for data loading
  num_workers: 4
  # path to the raw data within the H5
  raw_internal_path: raw
  # path to the the label data withtin the H5
  label_internal_path: label
  # path to the pixel-wise weight map withing the H5 if present
  weight_internal_path: null
  # configuration of the train loader
  train:
    # absolute paths to the training datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - "PATH_TO_THE_TRAIN_SET"

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    # **IMPORTANT**
    slice_builder:
      # use FilterSliceBuilder to filter out 'empty' patches
      name: FilterSliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [80, 160, 160]
      # train stride between patches; since more patches will be filtered set it to lower values
      stride_shape: [12, 30, 30]
      # **IMPORTANT** we rely on slice builder to filter out the ignore region (no masking in the loss)
      # so we need to set a more aggressive threshold
      threshold: 0.4
      # probability of acceptance rejected patches
      # e.g. 0.01 means that a rejected patch will be accepted with probability of 0.01
      slack_acceptance: 0.01
      # labels to be treated as 'ignored' (we decided that 0 is the background an 1 is the ignore)
      # although the background label (0) provides a correct training signal, if the volume contains a lot of background
      # the training will be slowed down significantly, so it's better to ignore it and rely on slack_acceptance for
      # training on background labels
      ignore_index: [0, 1]

    # data transformations/augmentations
    transformer:
      raw:
        # re-scale the values to be 0-mean and 1-std
        - name: Standardize
        # randomly flips an image across randomly chosen axis
        - name: RandomFlip
        # rotate an image by 90 degrees around a randomly chosen plane
        - name: RandomRotate90
        # rotate an image by a random degrees from taken from (-angle_spectrum, angle_spectrum) interval
        - name: RandomRotate
          # rotate only in ZY only since most volumetric data is anisotropic
          axes: [[2, 1]]
          angle_spectrum: 45
          mode: reflect
        # apply elasitc deformations of 3D patches on a per-voxel mesh
        - name: ElasticDeformation
          spline_order: 3
        # randomly adjust contrast
        - name: RandomContrast
        # apply additive Gaussian noise
        - name: AdditiveGaussianNoise
        # apply additive Poisson noise
        - name: AdditivePoissonNoise
        # convert to torch tensor
        - name: ToTensor
          # add additional 'channel' axis when the input data is 3D
          expand_dims: true
      label:
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY only since most volumetric data is anisotropic
          axes: [[2, 1]]
          angle_spectrum: 45
          mode: reflect
        - name: ElasticDeformation
          spline_order: 0
          # convert ground truth labels to ground truth boundaries
        - name: StandardLabelToBoundary
          # append ground truth labels in a separate channel for validation metric
          append_label: true
        - name: ToTensor
          expand_dims: true

  # configuration of the validation loaders
  val:
    # paths to the validation datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - "PATH_TO_THE_VAL_SET"

    # SliceBuilder configuration
    # **IMPORTANT** one could go over the whole validation set, but using FilterSliceBuilder will speed up validation significantly
    slice_builder:
      # use FilterSliceBuilder to filter out 'empty' patches
      name: FilterSliceBuilder
      # train patch size given to the network
      patch_shape: [80, 160, 160]
      # no need of patch overlap in validation
      stride_shape: [80, 160, 160]
      threshold: 0.1
      slack_acceptance: 0.01
      ignore_index: [0, 1]

    transformer:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true
      label:
        - name: ToTensor
          expand_dims: true